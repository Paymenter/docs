{
    "openapi": "3.1.0",
    "info": {
        "title": "Paymenter",
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "http://localhost/api"
        }
    ],
    "tags": [
        {
            "name": "Users"
        },
        {
            "name": "Services"
        },
        {
            "name": "Orders"
        },
        {
            "name": "Invoices"
        },
        {
            "name": "Tickets"
        },
        {
            "name": "Ticket Messages"
        }
    ],
    "security": [
        {
            "http": []
        }
    ],
    "paths": {
        "/v1/admin/users": {
            "get": {
                "operationId": "users.index",
                "summary": "List Users",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `first_name`, `last_name`, `email`, `created_at`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `properties`, `propertiesCount`, `propertiesExists`, `orders`, `ordersCount`, `ordersExists`, `services`, `servicesCount`, `servicesExists`, `invoices`, `invoicesCount`, `invoicesExists`, `tickets`, `ticketsCount`, `ticketsExists`, `credits`, `creditsCount`, `creditsExists`, `role`, `roleCount`, `roleExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[first_name]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[last_name]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[email]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the users as a JSON response\n\n\n\nPaginated set of `UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/PropertyResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/OrderResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/ServiceResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/InvoiceResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/TicketResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/CreditResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/RoleResource"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "users.store",
                "summary": "Create a new user",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created user as a JSON response\n\n\n\n`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/users/{user}": {
            "get": {
                "operationId": "users.show",
                "summary": "Show a specific user",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `properties`, `propertiesCount`, `propertiesExists`, `orders`, `ordersCount`, `ordersExists`, `services`, `servicesCount`, `servicesExists`, `invoices`, `invoicesCount`, `invoicesExists`, `tickets`, `ticketsCount`, `ticketsExists`, `credits`, `creditsCount`, `creditsExists`, `role`, `roleCount`, `roleExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the user as a JSON response\n\n\n\n`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "users.update",
                "summary": "Update a specific user",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the updated user as a JSON response\n\n\n\n`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "users.destroy",
                "summary": "Delete a specific user",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/orders": {
            "get": {
                "operationId": "orders.index",
                "summary": "List Orders",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `created_at`, `updated_at`, `currency_code`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `services`, `servicesCount`, `servicesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[currency_code]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the orders as a JSON response\n\n\n\nPaginated set of `OrderResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ServiceResource"
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "orders.store",
                "summary": "Create a new order",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created order as a JSON response\n\n\n\n`OrderResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/OrderResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/orders/{order}": {
            "get": {
                "operationId": "orders.show",
                "summary": "Show a specific order",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "required": true,
                        "description": "The order ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `services`, `servicesCount`, `servicesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the order as a JSON response\n\n\n\n`OrderResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/OrderResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "orders.update",
                "summary": "Update a specific order",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "required": true,
                        "description": "The order ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the updated order as a JSON response\n\n\n\n`OrderResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/OrderResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "orders.destroy",
                "summary": "Delete a specific order",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "required": true,
                        "description": "The order ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/services": {
            "get": {
                "operationId": "services.index",
                "summary": "List Services",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `created_at`, `updated_at`, `expires_at`, `status`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `order`, `orderCount`, `orderExists`, `coupon`, `couponCount`, `couponExists`, `user`, `userCount`, `userExists`, `product`, `productCount`, `productExists`, `invoices`, `invoicesCount`, `invoicesExists`, `properties`, `propertiesCount`, `propertiesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[quantity]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[price]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[expires_at]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[subscription_id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the services as a JSON response\n\n\n\nPaginated set of `ServiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ServiceResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/PropertyResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/CouponResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/UserResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/OrderResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/ProductResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/InvoiceResource"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "services.store",
                "summary": "Create a new service",
                "tags": [
                    "Services"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created service as a JSON response\n\n\n\n`ServiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ServiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/services/{service}": {
            "get": {
                "operationId": "services.show",
                "summary": "Show a specific service",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `order`, `orderCount`, `orderExists`, `coupon`, `couponCount`, `couponExists`, `user`, `userCount`, `userExists`, `product`, `productCount`, `productExists`, `invoices`, `invoicesCount`, `invoicesExists`, `properties`, `propertiesCount`, `propertiesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the service as a JSON response\n\n\n\n`ServiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ServiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "services.update",
                "summary": "Update a specific service",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the updated service as a JSON response\n\n\n\n`ServiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ServiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "services.destroy",
                "summary": "Delete a specific service",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/invoices": {
            "get": {
                "operationId": "invoices.index",
                "summary": "List Invoices",
                "tags": [
                    "Invoices"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `created_at`, `updated_at`, `currency_code`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `items`, `itemsCount`, `itemsExists`, `user`, `userCount`, `userExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[currency_code]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[user_id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[status]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the invoices as a JSON response\n\n\n\nPaginated set of `InvoiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InvoiceResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/UserResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/InvoiceItemResource"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "invoices.store",
                "summary": "Create a new invoice",
                "tags": [
                    "Invoices"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created invoice as a JSON response\n\n\n\n`InvoiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/InvoiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/invoices/{invoice}": {
            "get": {
                "operationId": "invoices.show",
                "summary": "Show a specific invoice",
                "tags": [
                    "Invoices"
                ],
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "required": true,
                        "description": "The invoice ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `items`, `itemsCount`, `itemsExists`, `user`, `userCount`, `userExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the invoice as a JSON response\n\n\n\n`InvoiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/InvoiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "invoices.update",
                "summary": "Update a specific invoice",
                "tags": [
                    "Invoices"
                ],
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "required": true,
                        "description": "The invoice ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the updated invoice as a JSON response\n\n\n\n`InvoiceResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/InvoiceResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "invoices.destroy",
                "summary": "Delete a specific invoice",
                "tags": [
                    "Invoices"
                ],
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "required": true,
                        "description": "The invoice ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/tickets": {
            "get": {
                "operationId": "tickets.index",
                "summary": "List Tickets",
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `created_at`, `updated_at`, `currency_code`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `messages`, `messagesCount`, `messagesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[currency_code]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the tickets as a JSON response\n\n\n\nPaginated set of `TicketResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TicketResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/TicketMessageResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/UserResource"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "tickets.store",
                "summary": "Create a new ticket",
                "tags": [
                    "Tickets"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created ticket as a JSON response\n\n\n\n`TicketResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TicketResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/tickets/{ticket}": {
            "get": {
                "operationId": "tickets.show",
                "summary": "Show a specific ticket",
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "name": "ticket",
                        "in": "path",
                        "required": true,
                        "description": "The ticket ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `messages`, `messagesCount`, `messagesExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the ticket as a JSON response\n\n\n\n`TicketResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TicketResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "tickets.update",
                "summary": "Update a specific ticket",
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "name": "ticket",
                        "in": "path",
                        "required": true,
                        "description": "The ticket ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the updated ticket as a JSON response\n\n\n\n`TicketResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TicketResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "tickets.destroy",
                "summary": "Delete a specific ticket",
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "name": "ticket",
                        "in": "path",
                        "required": true,
                        "description": "The ticket ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/ticket-messages": {
            "get": {
                "operationId": "ticket-messages.index",
                "summary": "List TicketMessages",
                "tags": [
                    "Ticket Messages"
                ],
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Available sorts are `id`, `created_at`, `updated_at`, `currency_code`. You can sort by multiple options by separating them with a comma. To sort in descending order, use `-` sign in front of the sort, for example: `-id`.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `user`, `userCount`, `userExists`, `ticket`, `ticketCount`, `ticketExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many items to show per page.",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 20
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Which page to show.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "filter[id]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter[currency_code]",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the ticketMessages as a JSON response\n\n\n\nPaginated set of `TicketMessageResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TicketMessageResource"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "path",
                                                "per_page",
                                                "to"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        },
                                        "included": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/UserResource"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/TicketResource"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "ticket-messages.store",
                "summary": "Create a new ticketMessage",
                "tags": [
                    "Ticket Messages"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTicketMessageRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return the created ticketMessage as a JSON response\n\n\n\n`TicketMessageResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TicketMessageResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        },
        "/v1/admin/ticket-messages/{ticketMessage}": {
            "get": {
                "operationId": "ticket-messages.show",
                "summary": "Show a specific ticketMessage",
                "tags": [
                    "Ticket Messages"
                ],
                "parameters": [
                    {
                        "name": "ticketMessage",
                        "in": "path",
                        "required": true,
                        "description": "The ticket message ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Available includes are `user`, `userCount`, `userExists`, `ticket`, `ticketCount`, `ticketExists`. You can include multiple options by separating them with a comma.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the ticketMessage as a JSON response\n\n\n\n`TicketMessageResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TicketMessageResource"
                                        }
                                    },
                                    "required": [
                                        "data"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "ticket-messages.destroy",
                "summary": "Delete a specific ticketMessage",
                "tags": [
                    "Ticket Messages"
                ],
                "parameters": [
                    {
                        "name": "ticketMessage",
                        "in": "path",
                        "required": true,
                        "description": "The ticket message ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "http": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "CategoryResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "categories"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "CategoryResourceIdentifier"
            },
            "CouponResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "coupons"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "code": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "recurring": {
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "value": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "max_uses": {
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "max_uses_per_user": {
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            },
                            "starts_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "expires_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "code",
                            "type",
                            "recurring",
                            "value",
                            "max_uses",
                            "max_uses_per_user",
                            "starts_at",
                            "expires_at",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "services": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ServiceResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "CouponResource"
            },
            "CouponResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "coupons"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "CouponResourceIdentifier"
            },
            "CreateInvoiceRequest": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    },
                    "due_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "cancelled"
                        ],
                        "default": "pending"
                    }
                },
                "required": [
                    "user_id",
                    "currency_code",
                    "status"
                ],
                "title": "CreateInvoiceRequest"
            },
            "CreateOrderRequest": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    }
                },
                "required": [
                    "user_id",
                    "currency_code"
                ],
                "title": "CreateOrderRequest"
            },
            "CreateServiceRequest": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer"
                    },
                    "plan_id": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "quantity": {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "active",
                            "cancelled",
                            "suspended"
                        ],
                        "default": "pending"
                    },
                    "expires_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    },
                    "price": {
                        "type": "number",
                        "minimum": 0
                    },
                    "coupon_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "subscription_id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "order_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "product_id",
                    "plan_id",
                    "user_id",
                    "quantity",
                    "status",
                    "currency_code",
                    "price"
                ],
                "title": "CreateServiceRequest"
            },
            "CreateTicketMessageRequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "maxLength": 5000
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "ticket_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "message",
                    "user_id",
                    "ticket_id"
                ],
                "title": "CreateTicketMessageRequest"
            },
            "CreateTicketRequest": {
                "type": "object",
                "properties": {
                    "subject": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "department": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "enum": [
                            ""
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "open",
                            "closed",
                            "replied"
                        ]
                    }
                },
                "required": [
                    "subject",
                    "user_id",
                    "priority",
                    "status"
                ],
                "title": "CreateTicketRequest"
            },
            "CreateUserRequest": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "last_name": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8
                    },
                    "email_verified_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "role_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "email",
                    "password"
                ],
                "title": "CreateUserRequest"
            },
            "CreditResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "credits"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "currency_code": {
                                "type": "string"
                            },
                            "amount": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "currency_code",
                            "amount",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "CreditResource"
            },
            "CreditResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "credits"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "CreditResourceIdentifier"
            },
            "InvoiceItemResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "invoiceItems"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "quantity": {
                                "type": "integer"
                            },
                            "price": {
                                "type": "string"
                            },
                            "currency_code": {
                                "type": "string"
                            },
                            "expires_at": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "quantity",
                            "price",
                            "currency_code",
                            "expires_at",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "services": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/ServiceResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "invoice": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/InvoiceResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "InvoiceItemResource"
            },
            "InvoiceItemResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "invoiceItems"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "InvoiceItemResourceIdentifier"
            },
            "InvoiceResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "invoices"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "status": {
                                "type": "string"
                            },
                            "currency_code": {
                                "type": "string"
                            },
                            "due_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "status",
                            "currency_code",
                            "due_at",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "items": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InvoiceItemResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "InvoiceResource"
            },
            "InvoiceResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "invoices"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "InvoiceResourceIdentifier"
            },
            "OrderResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "orders"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "currency_code": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "currency_code",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "services": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ServiceResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "OrderResource"
            },
            "OrderResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "orders"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "OrderResourceIdentifier"
            },
            "ProductResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "products"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "permissions",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "category": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CategoryResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "ProductResource"
            },
            "ProductResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "products"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "ProductResourceIdentifier"
            },
            "PropertyResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "properties"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "name": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "key": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "key",
                            "value",
                            "updated_at",
                            "created_at"
                        ]
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "PropertyResource"
            },
            "PropertyResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "properties"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "PropertyResourceIdentifier"
            },
            "RoleResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "roles"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "items": {}
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "permissions",
                            "updated_at",
                            "created_at"
                        ]
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "RoleResource"
            },
            "RoleResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "roles"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "RoleResourceIdentifier"
            },
            "ServiceResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "services"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "quantity": {
                                "type": "integer"
                            },
                            "price": {
                                "type": "string"
                            },
                            "currency_code": {
                                "type": "string"
                            },
                            "expires_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "quantity",
                            "price",
                            "currency_code",
                            "expires_at",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "services": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/PropertyResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "coupon": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CouponResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "user": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "order": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/OrderResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "product": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/ProductResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "invoices": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InvoiceResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "ServiceResource"
            },
            "ServiceResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "services"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "ServiceResourceIdentifier"
            },
            "TicketMessageResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "ticketMessages"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "message": {
                                "type": "string"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "message",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "ticket": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/TicketResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "TicketMessageResource"
            },
            "TicketMessageResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ticketMessages"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "TicketMessageResourceIdentifier"
            },
            "TicketResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "tickets"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "subject": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            },
                            "priority": {
                                "type": "string"
                            },
                            "department": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "subject",
                            "status",
                            "priority",
                            "department",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "messages": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TicketMessageResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "user": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "assigned_to": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/UserResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "TicketResource"
            },
            "TicketResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "tickets"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "TicketResourceIdentifier"
            },
            "UpdateInvoiceRequest": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    },
                    "due_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "cancelled"
                        ],
                        "default": "pending"
                    }
                },
                "required": [
                    "user_id",
                    "currency_code",
                    "status"
                ],
                "title": "UpdateInvoiceRequest"
            },
            "UpdateOrderRequest": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "integer"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    }
                },
                "required": [
                    "user_id",
                    "currency_code"
                ],
                "title": "UpdateOrderRequest"
            },
            "UpdateServiceRequest": {
                "type": "object",
                "properties": {
                    "product_id": {
                        "type": "integer"
                    },
                    "plan_id": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "quantity": {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "active",
                            "cancelled",
                            "suspended"
                        ],
                        "default": "pending"
                    },
                    "expires_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "currency_code": {
                        "type": "string",
                        "example": "USD"
                    },
                    "price": {
                        "type": "number",
                        "minimum": 0
                    },
                    "coupon_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "subscription_id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "order_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "product_id",
                    "plan_id",
                    "user_id",
                    "quantity",
                    "status",
                    "currency_code",
                    "price"
                ],
                "title": "UpdateServiceRequest"
            },
            "UpdateTicketRequest": {
                "type": "object",
                "properties": {
                    "subject": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "department": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "enum": [
                            ""
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "open",
                            "closed",
                            "replied"
                        ]
                    }
                },
                "required": [
                    "subject",
                    "user_id",
                    "priority",
                    "status"
                ],
                "title": "UpdateTicketRequest"
            },
            "UpdateUserRequest": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "last_name": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "minLength": 8
                    },
                    "email_verified_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "role_id": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "email"
                ],
                "title": "UpdateUserRequest"
            },
            "UserResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "users"
                        ]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "first_name": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "last_name": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "email": {
                                "type": "string"
                            },
                            "email_verified_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            },
                            "created_at": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "id",
                            "first_name",
                            "last_name",
                            "email",
                            "email_verified_at",
                            "updated_at",
                            "created_at"
                        ]
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "properties": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/PropertyResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "orders": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/OrderResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "services": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ServiceResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "invoices": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InvoiceResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "tickets": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TicketResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "credits": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/CreditResourceIdentifier"
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "role": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/RoleResourceIdentifier"
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "title": "UserResource"
            },
            "UserResourceIdentifier": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "users"
                        ]
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "id"
                ],
                "title": "UserResourceIdentifier"
            }
        },
        "responses": {
            "ValidationException": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Errors overview."
                                },
                                "errors": {
                                    "type": "object",
                                    "description": "A detailed description of each field that failed validation.",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "required": [
                                "message",
                                "errors"
                            ]
                        }
                    }
                }
            },
            "AuthorizationException": {
                "description": "Authorization error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "ModelNotFoundException": {
                "description": "Not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            }
        }
    }
}